{"version":3,"sources":["hooks/redux/actionTypes.js","hooks/redux/reducer.js","hooks/redux/actionCreators.js","hooks/redux/index.js","App.js","serviceWorker.js","index.js"],"names":["FETCHING","SUCCESS","ERROR","initialState","status","response","reducer","state","type","exception","map","item","index","productInStock","id","title","url","instock","inventory","vendor","fetching","success","error","useApiRequest","endpoint","method","params","useReducer","dispatch","makeRequest","useCallback","a","fetch","json","then","res","EditableList","useState","sortBy","setSortBy","sortDirection","setSortDirection","sortedList","setSortedList","checked","setChecked","_sort","newList","_","SortDirection","DESC","reverse","_sortList","_cellRenderer","dataKey","rowIndex","style","display","justifyContent","alignItems","width","marginRight","alt","src","color","marginLeft","role","useEffect","styleName","className","onClick","height","isScrolling","onChildScroll","scrollTop","autoHeight","onScroll","headerHeight","rowHeight","sort","rowCount","length","rowGetter","disableSort","headerRenderer","Checkbox","indeterminate","onChange","e","data","row","_onChangeHeaderCheckbox","cellRenderer","includes","newRow","old","filter","_onChangeRowCheckbox","label","JSON","stringify","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"6QAEaA,G,OAAQ,UAFN,SAEM,aACRC,EAAO,UAHL,SAGK,WACPC,EAAK,UAJH,SAIG,S,mCCFLC,EAAe,CAC1BC,OAAQ,KACRC,SAAU,MAsCGC,EAnCC,WAA+D,IAA9DC,EAA6D,uDAArDJ,EAAqD,yDAAP,GAA9BK,EAAqC,EAArCA,KAAMH,EAA+B,EAA/BA,SAA+B,EAArBI,UACvD,OAAQD,GACN,KAAKR,EACH,OAAO,2BAAKG,GAAZ,IAA0BC,OAAQJ,IACpC,KAAKC,EAuBH,OAtBAI,EACEA,GACAA,EAASK,KAAI,SAACC,EAAMC,GAClB,IAAIC,EAAiB,EASrB,OARc,IAAVD,IACFC,EAAiB,GAGjBA,EADY,IAAVD,GACgB,EAED,GAEZ,CACLE,GAAIH,EAAKG,GACTC,MAAOJ,EAAKI,MACZC,IAAKL,EAAKK,IACVC,QAASJ,EACTK,UAAW,WACXV,KAAM,YACNW,OAAQ,yBAGP,2BAAKZ,GAAZ,IAAmBH,OAAQH,EAASI,aACtC,KAAKH,EACH,OAAO,2BAAKK,GAAZ,IAAmBH,OAAQF,EAAOG,aACpC,QACE,OAAOE,ICpCAa,EAAW,iBAAO,CAAEZ,KAAMR,IAC1BqB,EAAU,SAAAhB,GAAQ,MAAK,CAAEG,KAAMP,EAASI,aACxCiB,EAAQ,SAAAjB,GAAQ,MAAK,CAAEG,KAAMN,EAAOG,aCkBlCkB,EAlBO,SAACC,GAAoD,IAAD,yDAAP,GAAO,IAAvCC,cAAuC,MAA9B,MAA8B,MAAvBC,cAAuB,MAAd,GAAc,IAC9CC,qBAAWrB,EAASH,GAD0B,mBACjEI,EADiE,KAC1DqB,EAD0D,KAGlEC,EAAcC,sBAAW,sBAAC,sBAAAC,EAAA,6DAC9BH,EAASR,KADqB,kBAGVY,MAAMR,EAAUE,EAAQ,CACxCD,OAAO,GAAD,OAAKA,KAJe,cAMxBQ,OAAOC,MAAK,SAACC,GAAD,OAASP,EAASP,EAAQc,OANd,gDAQ5BP,EAASN,EAAM,EAAD,KARc,yDAU7B,CAACE,EAAUC,EAAQC,IAEtB,MAAO,CAACnB,EAAOsB,ICJF,SAASO,IAAgB,IAAD,EACOb,EAAc,8CAExD,CACEE,OAAQ,QAJyB,0BAC5BrB,EAD4B,EAC5BA,OAAQC,EADoB,EACpBA,SAAYwB,EADQ,OAQTQ,mBAAS,MARA,mBAQ9BC,EAR8B,KAQtBC,EARsB,OASKF,mBAAS,OATd,mBAS9BG,EAT8B,KASfC,EATe,OAWDJ,mBAClCjC,IAAWH,EAAUI,EAAW,IAZG,mBAW9BqC,EAX8B,KAWlBC,EAXkB,OAcPN,mBAAS,IAdF,mBAc9BO,EAd8B,KAcrBC,EAdqB,KAiCrC,SAASC,EAAT,GAA2C,IAA1BR,EAAyB,EAAzBA,OAAQE,EAAiB,EAAjBA,cACvBD,EAAUD,GACVG,EAAiBD,GACjBG,EAZF,YAA+C,IAA1BL,EAAyB,EAAzBA,OAAQE,EAAiB,EAAjBA,cACrBO,EAAUC,IAAEV,OAAOI,EAAY,CAACJ,IAItC,OAHIE,IAAkBS,IAAcC,MAClCH,EAAQI,UAEHJ,EAOOK,CAAU,CAAEd,SAAQE,mBAGpC,SAASa,EAAcC,EAASC,GAC9B,MAAgB,UAAZD,EAEA,oCACE,yBACEE,MAAO,CACLC,QAAS,cACTC,eAAgB,SAChBC,WAAY,UAEd/C,MAAO2C,GAEP,yBACEC,MAAO,CAAEI,MAAO,OAAQC,YAAa,QACrCC,IAAI,MACJC,IAAKrB,GAAcA,EAAWa,GAAX,MAEpBb,GAAcA,EAAWa,GAAUD,KAIrB,cAAZA,EAEP,oCACE,yBACEE,MAAO,CACLC,QAAS,cACTC,eAAgB,SAChBC,WAAY,UAEd/C,MAAO2C,GAEP,0BACEC,MACEd,IAAmD,IAArCA,EAAWa,GAAX,QACV,CAAES,MAAO,YACT,IAGL,IACAtB,GAAcA,EAAWa,GAAX,SAEjB,0BAAMC,MAAO,CAAES,WAAY,QACxBvB,GAAcA,EAAWa,GAAUD,MAO1C,oCACE,yBACE1C,MAAO2C,EACPW,KAAK,WACLV,MAAmB,WAAZF,EAAuB,CAAEU,MAAO,SAAY,IAElDtB,GAAcA,EAAWa,GAAUD,KA/E9Ca,qBAAU,WACJ/D,IAAWH,GACb0C,EAActC,KAGf,CAACD,EAAQC,IA8FZ,OACE,oCACE,yBAAK+D,UAAU,iBACb,4BAAQC,UAAU,8BAA8BC,QAASzC,GAAzD,aAGCzB,IAAWJ,GAAY,4CACvBI,IAAWH,GACV,kBAAC,IAAD,MACG,gBAAGsE,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAaC,EAAxB,EAAwBA,cAAeC,EAAvC,EAAuCA,UAAvC,OACC,kBAAC,IAAD,CACEC,YAAU,EACVf,MAAO,IACPW,OAAQA,EACRC,YAAaA,EACbI,SAAUH,EACVI,aAAc,GACdC,UAAW,GACXC,KAAMjC,EACNR,OAAQA,EACRE,cAAeA,EACfwC,SAAUtC,GAAcA,EAAWuC,OACnCP,UAAWA,EACXQ,UAAW,gBAAGtE,EAAH,EAAGA,MAAH,OAAe8B,GAAcA,EAAW9B,KAEnD,kBAAC,IAAD,CACEuE,aAAW,EACX7B,QAAQ,WACRM,MAAO,GACPwB,eAAgB,kBACd,kBAACC,EAAA,EAAD,CACEC,cACE1C,EAAQqC,OAAS,GACjBrC,EAAQqC,OAASvC,GACjBA,EAAWuC,OAEbrC,QACEA,EAAQqC,SAAWvC,GAAcA,EAAWuC,OAE9CM,SAAU,SAACC,EAAGC,GAAJ,OApDE,SAACA,GAC/BA,EAAK7C,QACDC,EAAWH,GAAcA,EAAWhC,KAAI,SAACgF,GAAD,OAASA,EAAI5E,OACrD+B,EAAW,IAiD0B8C,CAAwBF,OAGnDG,aAAc,gBAAGrC,EAAH,EAAGA,SAAH,OACZ,kBAAC8B,EAAA,EAAD,CACEzC,SAGQ,IAFNA,EAAQiD,SACNnD,GAAcA,EAAWa,GAAUzC,IAGvCyE,SAAU,SAACC,EAAGC,GAAJ,OAxDD,SAACA,GAC5B,IAAMK,EAASpD,GAAcA,EAAW+C,EAAK7E,OAAOE,GACpD8B,EAAQiD,SAASC,GACbjD,GAAW,SAACkD,GAAD,OAASA,EAAIC,QAAO,SAACN,GAAD,OAASA,IAAQI,QAChDjD,GAAW,SAACkD,GAAD,4BAAaA,GAAb,CAAkBD,OAoDQG,CAAqBR,IAC5C7E,MAAO2C,OAIb,kBAAC,IAAD,CACED,QAAQ,KACR4C,MAAM,KACNtC,MAAO,GACPgC,aAAc,mBACZvC,EADY,EAAGC,QAAH,EAAYC,aAI5B,kBAAC,IAAD,CACED,QAAQ,QACR4C,MAAM,UACNtC,MAAO,IACPgC,aAAc,mBACZvC,EADY,EAAGC,QAAH,EAAYC,aAI5B,kBAAC,IAAD,CACED,QAAQ,YACR4C,MAAM,YACNtC,MAAO,IACPgC,aAAc,mBACZvC,EADY,EAAGC,QAAH,EAAYC,aAI5B,kBAAC,IAAD,CACED,QAAQ,OACR4C,MAAM,OACNtC,MAAO,IACPgC,aAAc,mBACZvC,EADY,EAAGC,QAAH,EAAYC,aAI5B,kBAAC,IAAD,CACED,QAAQ,SACR4C,MAAM,SACNtC,MAAO,IACPJ,MAAO,CAAEE,eAAgB,gBACzBkC,aAAc,mBACZvC,EADY,EAAGC,QAAH,EAAYC,iBAQnCnD,IAAWF,GACV,6BACE,6BACA,6BAAMiG,KAAKC,UAAU1D,OAQjC2D,IAASC,OAAO,kBAAClE,EAAD,MAAkBmE,SAASC,eAAe,SCpOtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNR,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEdC,OAAM,SAAA7F,GACL8F,QAAQ9F,MAAMA,EAAM+F,c","file":"static/js/main.e7bf768b.chunk.js","sourcesContent":["const prefix = 'redux/';\r\n\r\nexport const FETCHING = `${prefix}FETCHING`;\r\nexport const SUCCESS = `${prefix}SUCCESS`;\r\nexport const ERROR = `${prefix}ERROR`;\r\n","import { FETCHING, SUCCESS, ERROR } from \"./actionTypes\";\r\n\r\nexport const initialState = {\r\n  status: null,\r\n  response: null\r\n};\r\n\r\nconst reducer = (state = initialState, { type, response, exception } = {}) => {\r\n  switch (type) {\r\n    case FETCHING:\r\n      return { ...initialState, status: FETCHING };\r\n    case SUCCESS:\r\n      response =\r\n        response &&\r\n        response.map((item, index) => {\r\n          let productInStock = 0;\r\n          if (index === 1) {\r\n            productInStock = 0;\r\n          }\r\n          if (index === 2) {\r\n            productInStock = -1;\r\n          } else {\r\n            productInStock = 25;\r\n          }\r\n          return {\r\n            id: item.id,\r\n            title: item.title,\r\n            url: item.url,\r\n            instock: productInStock,\r\n            inventory: \"In Stock\",\r\n            type: \"Gift Card\",\r\n            vendor: \"Fullfil test store\"\r\n          };\r\n        });\r\n      return { ...state, status: SUCCESS, response };\r\n    case ERROR:\r\n      return { ...state, status: ERROR, response };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { FETCHING, SUCCESS, ERROR } from \"./actionTypes\";\r\n\r\nexport const fetching = () => ({ type: FETCHING });\r\nexport const success = response => ({ type: SUCCESS, response });\r\nexport const error = response => ({ type: ERROR, response });\r\n","import { useReducer, useCallback } from \"react\";\r\nimport reducer, { initialState } from \"./reducer\";\r\nimport { fetching, success, error } from \"./actionCreators\";\r\n\r\nconst useApiRequest = (endpoint, { method = \"get\", params = {} } = {}) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const makeRequest = useCallback(async () => {\r\n    dispatch(fetching());\r\n    try {\r\n      const res = await fetch(endpoint, params, {\r\n        method: `${method}`\r\n      });\r\n      res.json().then((res) => dispatch(success(res)));\r\n    } catch (e) {\r\n      dispatch(error(e));\r\n    }\r\n  }, [endpoint, method, params]);\r\n\r\n  return [state, makeRequest];\r\n};\r\n\r\nexport default useApiRequest;\r\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  Column,\n  Table,\n  SortDirection,\n  WindowScroller\n} from \"react-virtualized\";\nimport _ from \"lodash\";\nimport { Checkbox } from \"semantic-ui-react\";\nimport \"react-virtualized/styles.css\"; // only needs to be imported once\nimport { FETCHING, SUCCESS, ERROR } from \"./hooks/redux/actionTypes\";\n//import list from \"./list\";\nimport useApiRequest from \"./hooks/redux\";\n\nexport default function EditableList() {\n  const [{ status, response }, makeRequest] = useApiRequest(\n    `https://jsonplaceholder.typicode.com/photos`,\n    {\n      method: \"get\"\n    }\n  );\n\n  const [sortBy, setSortBy] = useState(\"id\");\n  const [sortDirection, setSortDirection] = useState(\"ASC\");\n\n  const [sortedList, setSortedList] = useState(\n    status === SUCCESS ? response : []\n  );\n  const [checked, setChecked] = useState([]);\n\n  useEffect(() => {\n    if (status === SUCCESS) {\n      setSortedList(response);\n      //return sortedList;\n    }\n  }, [status, response]);\n\n  // eslint-disable-next-line no-shadow\n  function _sortList({ sortBy, sortDirection }) {\n    const newList = _.sortBy(sortedList, [sortBy]);\n    if (sortDirection === SortDirection.DESC) {\n      newList.reverse();\n    }\n    return newList;\n  }\n\n  // eslint-disable-next-line no-shadow\n  function _sort({ sortBy, sortDirection }) {\n    setSortBy(sortBy);\n    setSortDirection(sortDirection);\n    setSortedList(_sortList({ sortBy, sortDirection }));\n  }\n\n  function _cellRenderer(dataKey, rowIndex) {\n    if (dataKey === \"title\") {\n      return (\n        <>\n          <div\n            style={{\n              display: \"inline-flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            }}\n            index={rowIndex}\n          >\n            <img\n              style={{ width: \"30px\", marginRight: \"10px\" }}\n              alt=\"url\"\n              src={sortedList && sortedList[rowIndex][\"url\"]}\n            />\n            {sortedList && sortedList[rowIndex][dataKey]}\n          </div>\n        </>\n      );\n    } else if (dataKey === \"inventory\") {\n      return (\n        <>\n          <div\n            style={{\n              display: \"inline-flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            }}\n            index={rowIndex}\n          >\n            <span\n              style={\n                sortedList && sortedList[rowIndex][\"instock\"] === -1\n                  ? { color: \"#ff9933 \" }\n                  : {}\n              }\n            >\n              {\" \"}\n              {sortedList && sortedList[rowIndex][\"instock\"]}\n            </span>\n            <span style={{ marginLeft: \"5px\" }}>\n              {sortedList && sortedList[rowIndex][dataKey]}\n            </span>\n          </div>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <div\n            index={rowIndex}\n            role=\"gridcell\"\n            style={dataKey === \"status\" ? { color: \"green\" } : {}}\n          >\n            {sortedList && sortedList[rowIndex][dataKey]}\n          </div>\n        </>\n      );\n    }\n  }\n\n  const _onChangeHeaderCheckbox = (data) => {\n    data.checked\n      ? setChecked(sortedList && sortedList.map((row) => row.id))\n      : setChecked([]);\n  };\n\n  const _onChangeRowCheckbox = (data) => {\n    const newRow = sortedList && sortedList[data.index].id;\n    checked.includes(newRow)\n      ? setChecked((old) => old.filter((row) => row !== newRow))\n      : setChecked((old) => [...old, newRow]);\n  };\n\n  return (\n    <>\n      <div styleName=\"editable-list\">\n        <button className=\"api-request__request-button\" onClick={makeRequest}>\n          Get User!\n        </button>\n        {status === FETCHING && <div>Fetching...</div>}\n        {status === SUCCESS && (\n          <WindowScroller>\n            {({ height, isScrolling, onChildScroll, scrollTop }) => (\n              <Table\n                autoHeight\n                width={1000}\n                height={height}\n                isScrolling={isScrolling}\n                onScroll={onChildScroll}\n                headerHeight={30}\n                rowHeight={40}\n                sort={_sort}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                rowCount={sortedList && sortedList.length}\n                scrollTop={scrollTop}\n                rowGetter={({ index }) => sortedList && sortedList[index]}\n              >\n                <Column\n                  disableSort\n                  dataKey=\"checkbox\"\n                  width={30}\n                  headerRenderer={() => (\n                    <Checkbox\n                      indeterminate={\n                        checked.length > 0 &&\n                        checked.length < sortedList &&\n                        sortedList.length\n                      }\n                      checked={\n                        checked.length === sortedList && sortedList.length\n                      }\n                      onChange={(e, data) => _onChangeHeaderCheckbox(data)}\n                    />\n                  )}\n                  cellRenderer={({ rowIndex }) => (\n                    <Checkbox\n                      checked={\n                        checked.includes(\n                          sortedList && sortedList[rowIndex].id\n                        ) === true\n                      }\n                      onChange={(e, data) => _onChangeRowCheckbox(data)}\n                      index={rowIndex}\n                    />\n                  )}\n                />\n                <Column\n                  dataKey=\"id\"\n                  label=\"ID\"\n                  width={60}\n                  cellRenderer={({ dataKey, rowIndex }) =>\n                    _cellRenderer(dataKey, rowIndex)\n                  }\n                />\n                <Column\n                  dataKey=\"title\"\n                  label=\"Product\"\n                  width={140}\n                  cellRenderer={({ dataKey, rowIndex }) =>\n                    _cellRenderer(dataKey, rowIndex)\n                  }\n                />\n                <Column\n                  dataKey=\"inventory\"\n                  label=\"Inventory\"\n                  width={120}\n                  cellRenderer={({ dataKey, rowIndex }) =>\n                    _cellRenderer(dataKey, rowIndex)\n                  }\n                />\n                <Column\n                  dataKey=\"type\"\n                  label=\"Type\"\n                  width={200}\n                  cellRenderer={({ dataKey, rowIndex }) =>\n                    _cellRenderer(dataKey, rowIndex)\n                  }\n                />\n                <Column\n                  dataKey=\"vendor\"\n                  label=\"Vendor\"\n                  width={150}\n                  style={{ justifyContent: \"space-evenly\" }}\n                  cellRenderer={({ dataKey, rowIndex }) =>\n                    _cellRenderer(dataKey, rowIndex)\n                  }\n                />\n              </Table>\n            )}\n          </WindowScroller>\n        )}\n        {status === ERROR && (\n          <div>\n            <br />\n            <div>{JSON.stringify(sortedList)}</div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nReactDOM.render(<EditableList />, document.getElementById(\"root\"));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}